import json
from sqlalchemy import *
from sqlalchemy.orm import scoped_session, sessionmaker
from sqlalchemy.ext.declarative import declarative_base

# These are what you get when you do `from database import *`
__all__ = ["db_session", "db_init"]

# Read database.json and parse it into a Python object. Close the file after.
# The database.json file is generated by puppet through our flaskdb module.
json_file = open('database.json')
database_details = json.load(json_file)
json_file.close()

# We flatten the dictionary database_details as keyword arguments to the format function.
# The format function formats a string with the proper details.
database_url = '{driver}://{user}:{password}@{host}/{database}'.format(**database_details)
engine = create_engine(database_url)


# Much of the code that follows was taken from http://flask.pocoo.org/docs/patterns/sqlalchemy/
db_session = scoped_session(sessionmaker(bind=engine, autocommit=False, autoflush=False))

Base = declarative_base()
Base.query = db_session.query_property()

def db_init():
    # import all modules here that might define models so that
    # they will be registered properly on the metadata.  Otherwise
    # you will have to import them first before calling db_init()
    import models
    Base.metadata.create_all(bind=engine)

